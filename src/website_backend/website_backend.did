type Account = record { owner : principal; subaccount : opt blob };
type Assets = record { url : text; mime : text; purpose : opt text };
type CandyShared = variant {
  Map : Vec;
  Nat : nat;
  Blob : blob;
  Bool : bool;
  Text : text;
  Array : vec CandyShared;
  Class : vec record { value : CandyShared; name : text; immutable : bool };
};
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type IndexArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type InitArgs = record {
  canister_ledger_nft : text;
  canister_ledger_token : text;
};
type Metadata = record {
  id : text;
  is_public : bool;
  name : text;
  assets : Assets;
  description : text;
  created_at_time : nat64;
  is_minted : bool;
};
type MintError = variant {
  GenericError : record { message : text; error_code : nat };
  SupplyCapReached;
  TokenIdMinimumLimit;
  Unauthorized;
  GenericBatchError : record { message : text; error_code : nat };
  TokenIdAlreadyExist;
};
type MintResult = variant {
  Ok : opt nat;
  Err : MintError;
  GenericError : record { message : text; error_code : nat };
};
type NFTInput = variant {
  Map : vec record { text; CandyShared };
  Class : vec PropertyShared;
};
type PropertyShared = record {
  value : CandyShared;
  name : text;
  immutable : bool;
};
type ResponseAPI = record { status : bool; result : text; message : text };
type Result = variant { Ok : vec MintResult; Err : MintError };
type SetNFTItemRequest = record {
  token_id : nat;
  owner : opt Account;
  metadata : NFTInput;
  memo : opt blob;
  override : bool;
  created_at_time : opt nat64;
};
type TransformArgs = record { context : blob; response : HttpResponse };
type UpgradeArgs = record {
  canister_ledger_nft : opt text;
  canister_ledger_token : opt text;
};
type Vec = vec record {
  text;
  variant {
    Map : Vec;
    Nat : nat;
    Blob : blob;
    Bool : bool;
    Text : text;
    Array : vec CandyShared;
    Class : vec record { value : CandyShared; name : text; immutable : bool };
  };
};
service : (opt IndexArgs) -> {
  delete_image_by_index : (nat64) -> ();
  get_images_by_principal : (text) -> (vec Metadata) query;
  get_tier : (text) -> (text) query;
  get_tx_summary : (nat64, nat64, text, text, text) -> (text);
  initialize_credit : () -> (bool);
  is_registered : (principal) -> (bool) query;
  mint_nft : (text, vec SetNFTItemRequest) -> (Result);
  refund_balance : () -> ();
  save_image_to_store : (Metadata) -> ();
  send_http_post : (text, text) -> (ResponseAPI);
  transform : (TransformArgs) -> (HttpResponse) query;
}