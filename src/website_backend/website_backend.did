type Assets = record { url : text; mime : text; purpose : opt text };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type IndexArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type InitArgs = record { canister_ledger : text };
type Metadata = record {
  id : text;
  name : text;
  assets : Assets;
  description : opt text;
  created_at_time : nat64;
};
type ResponseAPI = record { status : bool; result : text; message : text };
type TransformArgs = record { context : blob; response : HttpResponse };
type UpgradeArgs = record { canister_ledger : opt text };
service : (opt IndexArgs) -> {
  delete_image_by_index : (nat64) -> ();
  get_images_by_principal : (text) -> (vec Metadata) query;
  get_tier : (text) -> (text) query;
  get_tx_summary : (nat64, nat64, text, text, text) -> (text);
  initialize_credit : () -> (bool);
  is_registered : (principal) -> (bool) query;
  save_image_to_store : (Metadata) -> ();
  send_http_post : (text, text) -> (ResponseAPI);
  transform : (TransformArgs) -> (HttpResponse) query;
}